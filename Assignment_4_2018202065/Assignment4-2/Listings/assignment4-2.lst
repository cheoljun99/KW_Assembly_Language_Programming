


ARM Macro Assembler    Page 1 


    1 00000000                 AREA             blockData, CODE, READONLY
    2 00000000                 ENTRY
    3 00000000         
    4 00000000         main
    5 00000000         
    6 00000000         
    7 00000000 E3A0000A        MOV              r0, #10     ;saving 10 to r0 
    8 00000004 E3A0100B        mov              r1, #11     ;saving 11 to r1  
    9 00000008 E3A0200C        mov              r2, #12     ;saving 12 to r2 
   10 0000000C E3A0300D        mov              r3, #13     ;saving 13 to r3 
   11 00000010 E3A0400E        mov              r4, #14     ;saving 14 to r4 
   12 00000014 E3A0500F        mov              r5, #15     ;saving 15 to r5 
   13 00000018 E3A06010        mov              r6, #16     ;saving 16 to r6 
   14 0000001C E3A07011        mov              r7, #17     ;saving 17 to r7 
   15 00000020 E3A0A0A0        mov              r10,#160    ;saving 160 to r10 
                                                            
   16 00000024 E59F80AC        LDR              r8, TEMPADDR1 ;saving 0x4000000
                                                            0 to r8  
   17 00000028         ;STMFA r8,{r0-r7};saving r0~r7 to memory using stack by 
                       Full ascending way
   18 00000028         
   19 00000028 EAFFFFFF        b                doRegister  ; go to doRegister
   20 0000002C         
   21 0000002C         
   22 0000002C         
   23 0000002C         doRegister
   24 0000002C E98800FF        STMFA            r8,{r0-r7}  ;saving r0~r7 to me
                                                            mory using stack by
                                                             Full ascending way
                                                            
   25 00000030 E2800000        add              r0, r0, #0  ;adding r0+0 and sa
                                                            ving to r0
   26 00000034 E2811001        add              r1, r1, #1  ;adding r1+1 and sa
                                                            ving to r1
   27 00000038 E2822002        add              r2, r2, #2  ;adding r2+2 and sa
                                                            ving to r2
   28 0000003C E2833003        add              r3, r3, #3  ;adding r3+3 and sa
                                                            ving to r3
   29 00000040 E2844004        add              r4, r4, #4  ;adding r4+4 and sa
                                                            ving to r4
   30 00000044 E2855005        add              r5, r5, #5  ;adding r5+5 and sa
                                                            ving to r5
   31 00000048 E2866006        add              r6, r6, #6  ;adding r6+6 and sa
                                                            ving to r6
   32 0000004C E2877007        add              r7, r7, #7  ;adding r7+7 and sa
                                                            ving to r7
   33 00000050 E1A09000        mov              r9,r0       ;saving r0 to r9
   34 00000054 E0899001        add              r9,r9,r1    ;saving r1+r9 to r9
                                                            
   35 00000058 E0899002        add              r9,r9,r2    ; saving r2+r9 to r
                                                            9
   36 0000005C E0899003        add              r9,r9,r3    ; saving r3+r9 to r
                                                            9
   37 00000060 E0899004        add              r9,r9,r4    ; saving r4+r9 to r
                                                            9
   38 00000064 E0899005        add              r9,r9,r5    ; saving r5+r9 to r
                                                            9
   39 00000068 E0899006        add              r9,r9,r6    ; saving r6+r9 to r
                                                            9



ARM Macro Assembler    Page 2 


   40 0000006C E0899007        add              r9,r9,r7    ; saving r7+r9 to r
                                                            9
   41 00000070         
   42 00000070         doGCD
   43 00000070 E159000A        cmp              r9,r10      ;comparing r9 and r
                                                            10
   44 00000074 01A0B009        MOVEQ            r11,r9      ;if same, saving r9
                                                             to r11
   45 00000078 0A000002        BEQ              store       ;if same, go to sto
                                                            re
   46 0000007C 8049900A        SUBHI            r9,r9,r10   ;if r9 is bigger th
                                                            an r10, r9-10 is sa
                                                            ved to r9
   47 00000080 304AA009        SUBCC            r10,r10,r9  ;if r10 is bigger t
                                                            han r9, r10-r9 is s
                                                            aved to r10
   48 00000084 1AFFFFF9        BNE              doGCD       ; if not same, go t
                                                            o doGCD
   49 00000088         
   50 00000088         
   51 00000088         
   52 00000088         
   53 00000088         store
   54 00000088 E59F8048        LDR              r8, TEMPADDR1 ;saving 0x4000000
                                                            0 to r8 
   55 0000008C E488B004        STR              r11,[r8],#4 ;saving r11 to memo
                                                            ry
   56 00000090         
   57 00000090         
   58 00000090 E498C004        LDR              r12,[r8],#4 ;reading and saving
                                                             0x40000004's value
                                                             to r12
   59 00000094 E080000C        ADD              r0,r0,r12   ;saving r12+r0 to r
                                                            0
   60 00000098         
   61 00000098 E498C004        LDR              r12,[r8],#4 ;reading and saving
                                                             0x40000008's value
                                                             to r12
   62 0000009C E081100C        ADD              r1,r1,r12   ;saving r12+r1 to r
                                                            1
   63 000000A0         
   64 000000A0 E498C004        LDR              r12,[r8],#4 ;reading and saving
                                                             0x4000000C's value
                                                             to r12
   65 000000A4 E082200C        ADD              r2,r2,r12   ;saving r12+r2 to r
                                                            2
   66 000000A8         
   67 000000A8 E498C004        LDR              r12,[r8],#4 ;reading and saving
                                                             0x40000010's value
                                                             to r12
   68 000000AC E083300C        ADD              r3,r3,r12   ;saving r12+r3 to r
                                                            3
   69 000000B0         
   70 000000B0 E498C004        LDR              r12,[r8],#4 ;reading and saving
                                                             0x40000014's value
                                                             to r12
   71 000000B4 E084400C        ADD              r4,r4,r12   ;saving r12+r4 to r
                                                            4
   72 000000B8         



ARM Macro Assembler    Page 3 


   73 000000B8 E498C004        LDR              r12,[r8],#4 ;reading and saving
                                                             0x40000018's value
                                                             to r12
   74 000000BC E085500C        ADD              r5,r5,r12   ;saving r12+r5 to r
                                                            5
   75 000000C0         
   76 000000C0 E498C004        LDR              r12,[r8],#4 ;reading and saving
                                                             0x4000001C's value
                                                             to r12
   77 000000C4 E086600C        ADD              r6,r6,r12   ;saving r12+r6 to r
                                                            6
   78 000000C8         
   79 000000C8 E498C004        LDR              r12,[r8],#4 ;reading and saving
                                                             0x40000020's value
                                                             to r12
   80 000000CC E087700C        ADD              r7,r7,r12   ;saving r12+r7 to r
                                                            7
   81 000000D0         
   82 000000D0 E59F8000        LDR              r8, TEMPADDR1 ;saving 0x4000000
                                                            0 to r8
   83 000000D4 E98800FF        STMFA            r8,{r0-r7}  ;saving r0~r7 to me
                                                            mory using stack by
                                                             Full ascending way
                                                            
   84 000000D8         
   85 000000D8 40000000 
                       TEMPADDR1
                               &                &40000000   ;0x40000000 is save
                                                            d to TEMPADDR1 
   86 000000DC E1A0F00E        MOV              pc,lr
   87 000000E0                 END                          ; Mark end of file
Command Line: --debug --xref --diag_suppress=9931 --cpu=ARM9E --apcs=interwork 
--depend=.\objects\assignment4-2.d -o.\objects\assignment4-2.o -IC:\Keil_v5\ARM
\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include --predefine="__EVAL SETA 1" --predefin
e="__UVISION_VERSION SETA 528" --list=.\listings\assignment4-2.lst Assignment4-
2.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

TEMPADDR1 000000D8

Symbol: TEMPADDR1
   Definitions
      At line 85 in file Assignment4-2.s
   Uses
      At line 16 in file Assignment4-2.s
      At line 54 in file Assignment4-2.s
      At line 82 in file Assignment4-2.s

blockData 00000000

Symbol: blockData
   Definitions
      At line 1 in file Assignment4-2.s
   Uses
      None
Comment: blockData unused
doGCD 00000070

Symbol: doGCD
   Definitions
      At line 42 in file Assignment4-2.s
   Uses
      At line 48 in file Assignment4-2.s
Comment: doGCD used once
doRegister 0000002C

Symbol: doRegister
   Definitions
      At line 23 in file Assignment4-2.s
   Uses
      At line 19 in file Assignment4-2.s
Comment: doRegister used once
main 00000000

Symbol: main
   Definitions
      At line 4 in file Assignment4-2.s
   Uses
      None
Comment: main unused
store 00000088

Symbol: store
   Definitions
      At line 53 in file Assignment4-2.s
   Uses
      At line 45 in file Assignment4-2.s
Comment: store used once
6 symbols
338 symbols in table
