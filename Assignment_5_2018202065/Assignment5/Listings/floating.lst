


ARM Macro Assembler    Page 1 


    1 00000000                 AREA             ARMex,CODE,READONLY
    2 00000000                 ENTRY
    3 00000000         
    4 00000000         floating_add_main
    5 00000000         
    6 00000000 E59F0180        LDR              r0,=float1
    7 00000004 E59F1180        LDR              r1,=float2
    8 00000008 E5902000        ldr              r2,[r0]
    9 0000000C E5913000        ldr              r3,[r1]
   10 00000010 E1A04FA2        mov              r4, r2, lsr #31 ;float1's sign
   11 00000014 E1A05082        mov              r5, r2, lsl #1
   12 00000018 E1A05C25        mov              r5, r5, lsr #24 
                                                            ;float1's mantissa
   13 0000001C E1A06482        mov              r6,r2,lsl #9
   14 00000020 E1A064A6        mov              r6,r6, lsr #9 
                                                            ;float1's mantissa
   15 00000024 E2866502        add              r6,r6,#0x00800000 ;float1's man
                                                            tissa include numbe
                                                            r 1
   16 00000028         
   17 00000028 E1A07FA3        mov              r7, r3, lsr #31 ;float2's sign
   18 0000002C E1A08083        mov              r8, r3, lsl #1
   19 00000030 E1A08C28        mov              r8, r8, lsr #24 
                                                            ;float2's mantissa
   20 00000034 E1A09483        mov              r9,r3,lsl #9
   21 00000038 E1A094A9        mov              r9,r9, lsr #9 
                                                            ;float2's mantissa
   22 0000003C E2899502        add              r9,r9,#0x00800000 ;float2's man
                                                            tissa include numbe
                                                            r 1
   23 00000040         
   24 00000040 E3550000        cmp              r5,#0x00000000 ;Check if two nu
                                                            mbers are zero.
   25 00000044 03560502        cmpeq            r6,#0x00800000 ;Check if two nu
                                                            mbers are zero.
   26 00000048 03580000        cmpeq            r8,#0x00000000 ;Check if two nu
                                                            mbers are zero.
   27 0000004C 03590502        cmpeq            r9,#0x00800000 ;Check if two nu
                                                            mbers are zero.
   28 00000050 E3A0A000        mov              r10,#0x00000000 ;Check if two n
                                                            umbers are zero, if
                                                             yes, result is zer
                                                            o
   29 00000054 0A000045        beq              floating_add_finish ;Check if t
                                                            wo numbers are zero
                                                            , if yes, go to fin
                                                            ishbranch
   30 00000058         
   31 00000058 E1540007        cmp              r4,r7       ;Check the sign of 
                                                            two numbers.
   32 0000005C 0A000000        beq              floating_add_same ;if same, go 
                                                            to same branch
   33 00000060 1A000012        bne              floating_add_notsame ;if  not s
                                                            mae go to notsame b
                                                            ranch
   34 00000064         
   35 00000064         floating_add_same
   36 00000064 E1550008        cmp              r5,r8       ;compare exponent
   37 00000068 0045A008        subeq            r10, r5,r8  ; this case is that



ARM Macro Assembler    Page 2 


                                                             shift num is zero
   38 0000006C C045A008        SUBGT            r10, r5,r8  ; this is shift num
                                                            
   39 00000070 B048A005        SUBLT            r10, r8,r5  ; this is shift num
                                                            
   40 00000074 C1A09A39        MOVGT            r9,r9,lsr r10 ;changing mantiss
                                                            a using shift num
   41 00000078 B1A06A36        MOVLT            r6,r6,lsr r10 ;changing mantiss
                                                            a using shift num
   42 0000007C E086B009        add              r11,r6,r9   ;adding mantisa
   43 00000080 E1A0CC2B        mov              r12,r11,lsr#24 ;checking mantis
                                                            sa for normalizing
   44 00000084 B08CA008        ADDLT            r10,r12,r8  ;changing exponent
   45 00000088 C08CA005        ADDGT            r10,r12,r5  ;changing exponent
   46 0000008C 008CA005        ADDEQ            r10,r12,r5  ;changing exponent
   47 00000090 E35C0000        cmp              r12,#0      ;checking mantissa 
                                                            for normalizing
   48 00000094 11A0B0AB        MOVNE            r11,r11,lsr#1 ;normalizing mant
                                                            issa
   49 00000098 E24BB502        sub              r11,r11,#0x00800000 ;Subtract 1
                                                             from the mantissa 
                                                            that contains 1.
   50 0000009C E1A0C00A        mov              r12,r10
   51 000000A0 E1A0A00B        mov              r10,r11     ;saving result to r
                                                            10
   52 000000A4 E08AAB8C        add              r10,r10,r12,lsl#23 ;saving resu
                                                            lt to r10
   53 000000A8 E08AAF84        add              r10,r10,r4,lsl#31 ;saving resul
                                                            t to r10
   54 000000AC EA00002F        b                floating_add_finish ;go to fini
                                                            sh branch for endin
                                                            g
   55 000000B0         
   56 000000B0         floating_add_notsame
   57 000000B0 E1550008        cmp              r5,r8       ;compare exponent
   58 000000B4 C045A008        SUBGT            r10, r5,r8  ; this is shift num
                                                            
   59 000000B8 B048A005        SUBLT            r10, r8,r5  ; this is shift num
                                                            
   60 000000BC C1A09A39        MOVGT            r9,r9,lsr r10 ;changing mantiss
                                                            a using shift num
   61 000000C0 B1A06A36        MOVLT            r6,r6,lsr r10 ;changing mantiss
                                                            a using shift num
   62 000000C4 E1560009        cmp              r6,r9
   63 000000C8 C046B009        SUBGT            r11,r6,r9   ;substracting manti
                                                            ssa
   64 000000CC B049B006        SUBLT            r11,r9,r6   ;substracting manti
                                                            ssa
   65 000000D0         
   66 000000D0         
   67 000000D0 E1A0CBAB        mov              r12,r11,lsr#23 ;checking mantsi
                                                            ssa's state
   68 000000D4 E35C0001        cmp              r12,#1      ;this case is no re
                                                            quired normalizing
   69 000000D8 0A000006        beq              floating_add_nonormalize ;so if
                                                             this case go to no
                                                            normalize branch
   70 000000DC         
   71 000000DC E35B0000        cmp              r11,#0x00000000 ;checking mants



ARM Macro Assembler    Page 3 


                                                            issa's state, if ma
                                                            ntissa sum is zero 
                                                            
   72 000000E0 01550008        cmpeq            r5,r8       ;if mantissa sum is
                                                             zero,check exponen
                                                            t state
   73 000000E4 03A0A000        moveq            r10,#0x00000000 ;if exponent ar
                                                            e same, this case's
                                                             result is zero so 
                                                            save zero to r10
   74 000000E8 0A000020        beq              floating_add_finish ;go to fini
                                                            sh branch for endin
                                                            g
   75 000000EC         
   76 000000EC E35C0000        cmp              r12,#0      ;checking mantsissa
                                                            's state
   77 000000F0 03A0A000        moveq            r10,#0      ;this case is requi
                                                            red mantisa's norma
                                                            lizing and changing
                                                             exponent
   78 000000F4 0A00000A        beq              floating_add_loop ; so go to lo
                                                            op branch for manti
                                                            sa's normalizing an
                                                            d changing exponent
                                                            
   79 000000F8         
   80 000000F8         
   81 000000F8         floating_add_nonormalize
   82 000000F8         ;this branch is made for normalize case
   83 000000F8 E24BB502        sub              r11,r11,#0x00800000 ;Subtract 1
                                                             from the mantissa 
                                                            that contains 1.
   84 000000FC E1A0A00B        mov              r10,r11     ;saving result to r
                                                            10
   85 00000100 E1550008        cmp              r5,r8
   86 00000104         
   87 00000104 008AAB85        ADDEQ            r10,r10,r5,lsl#23 ;saving resul
                                                            t to r10
   88 00000108 01560009        cmpeq            r6,r9
   89 0000010C C08AAF84        ADDGT            r10,r10,r4,lsl#31 ;saving resul
                                                            t to r10
   90 00000110 B08AAF87        ADDLT            r10,r10,r7,lsl#31 ;saving resul
                                                            t to r10
   91 00000114         
   92 00000114 E1550008        cmp              r5,r8
   93 00000118 C08AAB85        ADDGT            r10,r10,r5,lsl#23 ;saving resul
                                                            t to r10
   94 0000011C B08AAB88        ADDLT            r10,r10,r8,lsl#23 ;saving resul
                                                            t to r10
   95 00000120 EA000012        b                floating_add_finish ;go to fini
                                                            sh branch for endin
                                                            g
   96 00000124         
   97 00000124         
   98 00000124         floating_add_loop
   99 00000124         ;this branch is made for mantisa's normalizing and chang
                       ing exponent
  100 00000124 E28AA001        add              r10,r10,#1  ;counter
  101 00000128 E1A0CA3B        mov              r12, r11,lsr r10 ;find first 1 



ARM Macro Assembler    Page 4 


                                                            for mantisa's norma
                                                            lizing 
  102 0000012C E35C0001        cmp              r12,#1      ;if you find first 
                                                            1
  103 00000130 0A000000        beq              floating_add_endloop ;if you fi
                                                            nd first 1, go to e
                                                            ndloop
  104 00000134 1AFFFFFA        bne              floating_add_loop ;if you don't
                                                             find first 1, Repe
                                                            at loop
  105 00000138         
  106 00000138         
  107 00000138         floating_add_endloop
  108 00000138 E26AA017        rsb              r10,r10,#23 ;Revising counter f
                                                            or mantisa's normal
                                                            izing and changing 
                                                            exponent
  109 0000013C E1A0BA1B        mov              r11,r11,lsl r10 ;mantisa's norm
                                                            alizing using count
                                                            er
  110 00000140 E24BB502        sub              r11,r11,#0x00800000 ;Subtract 1
                                                             from the mantissa 
                                                            that contains 1
  111 00000144 E1550008        cmp              r5,r8
  112 00000148 0045C00A        SUBEQ            r12,r5,r10  ;changing exponent 
                                                            using counter
  113 0000014C C045C00A        SUBGT            r12,r5,r10  ;changing exponent 
                                                            using counter
  114 00000150 B048C00A        SUBLT            r12,r8,r10  ;changing exponent 
                                                            using counter
  115 00000154         
  116 00000154 E1A0A00B        mov              r10,r11     ;saving result to r
                                                            10
  117 00000158 E08AAB8C        ADD              r10,r10,r12,lsl#23 ;saving resu
                                                            lt to r10
  118 0000015C         
  119 0000015C E1550008        cmp              r5,r8
  120 00000160 01560009        cmpeq            r6,r9       ;if exponents are s
                                                            ame, we check manti
                                                            sa for conclude sig
                                                            n bit
  121 00000164 C08AAF84        ADDGT            r10,r10,r4,lsl#31 ;saving resul
                                                            t to r10
  122 00000168 B08AAF87        ADDLT            r10,r10,r7,lsl#31 ;saving resul
                                                            t to r10
  123 0000016C EAFFFFFF        b                floating_add_finish ;go to fini
                                                            sh branch for endin
                                                            g
  124 00000170         
  125 00000170         floating_add_finish
  126 00000170 E59F000C        LDR              r0, Address1 ;saving 0x40000000
                                                             to r0
  127 00000174 E480A020        str              r10,[r0],#32 ;saving r10's valu
                                                            e to memory
  128 00000178 E1A0F00E        mov              pc,lr
  129 0000017C         
  130 0000017C 4141F9A7 
                       float1  &                0x4141F9A7
  131 00000180 4158B0FD 



ARM Macro Assembler    Page 5 


                       float2  &                0x4158B0FD
  132 00000184         
  133 00000184 40000000 
                       Address1
                               DCD              &40000000
  134 00000188                 END
              00000000 
              00000000 
Command Line: --debug --xref --diag_suppress=9931 --cpu=ARM9E --apcs=interwork 
--depend=.\objects\floating.d -o.\objects\floating.o -IC:\Keil_v5\ARM\RV31\INC 
-IC:\Keil_v5\ARM\CMSIS\Include --predefine="__EVAL SETA 1" --predefine="__UVISI
ON_VERSION SETA 528" --list=.\listings\floating.lst floating.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

ARMex 00000000

Symbol: ARMex
   Definitions
      At line 1 in file floating.s
   Uses
      None
Comment: ARMex unused
Address1 00000184

Symbol: Address1
   Definitions
      At line 133 in file floating.s
   Uses
      At line 126 in file floating.s
Comment: Address1 used once
float1 0000017C

Symbol: float1
   Definitions
      At line 130 in file floating.s
   Uses
      At line 6 in file floating.s
Comment: float1 used once
float2 00000180

Symbol: float2
   Definitions
      At line 131 in file floating.s
   Uses
      At line 7 in file floating.s
Comment: float2 used once
floating_add_endloop 00000138

Symbol: floating_add_endloop
   Definitions
      At line 107 in file floating.s
   Uses
      At line 103 in file floating.s
Comment: floating_add_endloop used once
floating_add_finish 00000170

Symbol: floating_add_finish
   Definitions
      At line 125 in file floating.s
   Uses
      At line 29 in file floating.s
      At line 54 in file floating.s
      At line 74 in file floating.s
      At line 95 in file floating.s
      At line 123 in file floating.s

floating_add_loop 00000124

Symbol: floating_add_loop
   Definitions
      At line 98 in file floating.s
   Uses
      At line 78 in file floating.s



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

      At line 104 in file floating.s

floating_add_main 00000000

Symbol: floating_add_main
   Definitions
      At line 4 in file floating.s
   Uses
      None
Comment: floating_add_main unused
floating_add_nonormalize 000000F8

Symbol: floating_add_nonormalize
   Definitions
      At line 81 in file floating.s
   Uses
      At line 69 in file floating.s
Comment: floating_add_nonormalize used once
floating_add_notsame 000000B0

Symbol: floating_add_notsame
   Definitions
      At line 56 in file floating.s
   Uses
      At line 33 in file floating.s
Comment: floating_add_notsame used once
floating_add_same 00000064

Symbol: floating_add_same
   Definitions
      At line 35 in file floating.s
   Uses
      At line 32 in file floating.s
Comment: floating_add_same used once
11 symbols
345 symbols in table
